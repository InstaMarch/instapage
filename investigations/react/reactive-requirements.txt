Background
---
In the spring of 2017, bp, zpo, and mnr, set out to create the 
react framework from scratch. We started from David Gilbertson's
excellent article on the topic:


https://hackernoon.com/how-i-converted-my-react-app-to-vanillajs-and-whether-or-not-it-was-a-terrible-idea-4b14b1b2faff
https://hackernoon.com/@david.gilbertson

Tools
---
npm -g install the following:
babel-cli
babel-preset-env
npm -g install babel-preset-es2015
npm -g install jsdom

Summary from the original article:
--
There are three distinct parts to React that make it great:

- JSX syntax
- Components/composability
- One-directional data flow (UI > action > state > magic > UI)

React brings comes from two places:
The sheer effort of parsing 60 KB of JavaScript.
The magic that happens after you update the state, before the DOM updates.


Code Structure
---
The entire VReact framework is contained in the sigle 
reactive-vanilla.js file

JSX syntax
---
appendText(el, text)
appendArray(el, children)
setStyles(el, styles)
makeElement(type, textOrPropsOrChild, ...otherChildren)
const h1 = (...args) => makeElement(`h1`, ...args);
const h2 = (...args) => makeElement(`h2`, ...args);
const a = (...args) => makeElement(`a`, ...args);
const button = (...args) => makeElement(`button`, ...args);
const div = (...args) => makeElement(`div`, ...args);
const header = (...args) => makeElement(`header`, ...args);
const p = (...args) => makeElement(`p`, ...args);
const span = (...args) => makeElement(`span`, ...args);

JSX Example
---
document.body.appendChild(h1({className: "title"},
    `Hello, world.`));


Binding click event
---
JavaScript is wonderful and functions are objects, 
you can go right ahead and pass in a property called onclick 
with a function as the value and the VanillaJS event system 
will bind a click event to that element for you.

bab